<!DOCTYPE html>
<html>
	<head></head>
	
	<style>
		
		.big-button { font-size: 48px; }
		body { zoom: 50%; }
		
	</style>
	
	<body>
		
		<div>Teachable Machine Image Model</div>
		<button class = "big-button" type = "button" onclick = "init()">Start</button>
		<div id = "webcam-container"></div>
		<div id = "label-container"></div>
		<script src="https://cdn.jsdelivr.net/npm/@tensorflow/tfjs@latest/dist/tf.min.js"></script>
		<script src="https://cdn.jsdelivr.net/npm/@teachablemachine/image@latest/dist/teachablemachine-image.min.js"></script>
		
		// 1. Write your HTML code below:
		
		<img src = "guinet-sylvain-dragonice-15853-899_Page_2.jpg">
		<img src = "guinet-sylvain-dragonice-15853-899_Page_3.jpg">
		
		<script type = "text/javascript">
    			
			// 2. Write your JavaScript below:
			
			function scrollDown() { window.scrollBy( 0, 100 ); }
			
			// 3. Go to:
			// https://teachablemachine.withgoogle.com/train
			/*
				
				(a) Choose a project and choose "Standard image model".
				(b) Name your classes and add sample training data ("Add ... Samples").
				(c) "Train" your model.
				(d) "Preview" and test your training data.
				(e) Repeat steps 2 - 4 as necessary.
				(f) When ready -> "Export Model" (Tensorflow.js -> "Upload my model").
				(g) Copy "Your shareable link:" and paste it below:

			*/
    			const URL = "https://teachablemachine.withgoogle.com/models/a5ZFEuYhI/";
			
			// More API functions here:
    			// https://github.com/googlecreativelab/teachablemachine-community/tree/master/libraries/image
			
			let model, webcam, labelContainer, maxPredictions;

			// Load the image model and setup the webcam
			async function init() {
				
				let modelURL = URL + "model.json";
        			let metadataURL = URL + "metadata.json";
				
        			// load the model and metadata
        			// Refer to tmImage.loadFromFiles() in the API to support files from a file picker
        			// or files from your local hard drive
        			// Note: the pose library adds "tmImage" object to your window ( window.tmImage )
        			model = await tmImage.load( modelURL, metadataURL );
        			maxPredictions = model.getTotalClasses();
					
        			// Convenience function to setup a webcam
        			let flip = true; // whether to flip the webcam
        			webcam = new tmImage.Webcam( 200, 200, flip ); // width, height, flip
        			await webcam.setup(); // request access to the webcam
        			await webcam.play();
        			window.requestAnimationFrame(loop);
				
        			// append elements to the DOM
        			document.getElementById("webcam-container").appendChild(webcam.canvas);
        			labelContainer = document.getElementById("label-container");
        			for ( let i = 0; i < maxPredictions; i++ ) { // and class labels
            				labelContainer.appendChild( document.createElement( "div" ) );
        			}
				
    			}
			
    			async function loop() {
				
        			webcam.update(); // update the webcam frame
        			await predict();
        			window.requestAnimationFrame( loop );
				
    			}
			
    			// run the webcam image through the image model
    			async function predict() {
				
        			// predict can take in an image, video or canvas html element
        			
				// Write your JavaScript code below.
				
				const prediction = await model.predict(webcam.canvas);
        			for ( let i = 0; i < maxPredictions; i++ ) {
            				const classPrediction =
                			prediction[i].className + ": " + prediction[i].probability.toFixed( 2 );
            				labelContainer.childNodes[ i ].innerHTML = classPrediction;
					
					// 4. Write your JavaScript conditions and consequences for predictions made below:
					
					if ( prediction[ i ].className == "Nod" && prediction[ i ].probability.toFixed( 2 ) == 1.00 )
						scrollDown();
					
        			}
				
    			}
			
		</script>

	</body>
</html>